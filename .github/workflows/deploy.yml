#!/usr/bin/env bash
# /srv/myapp/deploy.sh ‚Äî d√©ploiement verbeux + rollback
set -Eeuo pipefail

### --- CONFIG ---
APP_DIR="/srv/myapp"
SRC_DIR="/opt/app/hello"         # ‚Üê ton code source actuel (on basculera sur git + artefacts plus tard)
SERVICE="myapp"
KEEP_RELEASES=5
NODE="/usr/bin/node"             # chemin fixe de node (systemd-friendly)

### --- LOGS ---
TS="$(date +%Y%m%d%H%M%S)"
REL_DIR="$APP_DIR/releases/$TS"
LOG_DIR="$APP_DIR/deploy-logs"
LOG_FILE="$LOG_DIR/deploy-$TS.log"
mkdir -p "$LOG_DIR"
# Horodatage chaque ligne + double sortie console + fichier
exec > >(awk '{ print strftime("[%F %T]"), $0 }' | tee -a "$LOG_FILE") 2>&1

### --- HELPERS ---
step() { echo; echo "=== STEP: $* ==="; }
fail() { echo "‚úñ ERROR at line $1 while: $2"; echo "‚Üí Voir $LOG_FILE"; exit 1; }
SECONDS=0
_current_cmd="init"
trap 'fail "$LINENO" "$_current_cmd"' ERR

run() { _current_cmd="$*"; echo "+ $*"; eval "$*"; }

### --- CONTEXTE ---
step "Contexte & pr√©-checks"
run "whoami && hostname && pwd"
run "$NODE -v || true"
run "npm -v || true"
test -f "$SRC_DIR/package.json"; echo "OK: package.json dans $SRC_DIR"
test -f "$APP_DIR/shared/.env"; echo "OK: .env partag√© pr√©sent"
PORT="$(grep -E '^PORT=' "$APP_DIR/shared/.env" | cut -d= -f2 || true)"; : "${PORT:=3001}"
echo "Port d√©tect√©: $PORT"

### --- CR√âER LE RELEASE ---
step "Cr√©ation du release $REL_DIR"
run "mkdir -p '$REL_DIR'"
run "rsync -a --delete '$SRC_DIR'/ '$REL_DIR'/"   # copie le code courant
run "du -sh '$REL_DIR' || true"

### --- DEPS & BUILD ---
step "Installation des d√©pendances (npm ci / npm i)"
cd "$REL_DIR"
if [ -f package-lock.json ]; then
  run "npm ci --no-audit --no-fund"
else
  run "npm install --no-audit --no-fund"
fi
step "Build (optionnel)"
run "npm run build --if-present || true"

### --- LIENS PARTAG√âS ---
step "Lier l'env partag√©"
run "ln -sfn '$APP_DIR/shared/.env' '$REL_DIR/.env'"

### --- BASCULE ATOMIQUE + RESTART ---
step "Bascule current -> $REL_DIR (sauvegarde ancien lien pour rollback)"
OLD_CURRENT="$(readlink -f "$APP_DIR/current" || true)"; echo "Ancien current: ${OLD_CURRENT:-<none>}"
run "ln -sfn '$REL_DIR' '$APP_DIR/current'"

step "Red√©marrage du service $SERVICE"
run "sudo systemctl restart '$SERVICE'"
run "sudo systemctl is-active '$SERVICE'"

### --- SANT√â (retry) ---
step "Healthcheck (max 20s) sur http://127.0.0.1:$PORT"
for i in $(seq 1 20); do
  if curl -sSf "http://127.0.0.1:$PORT/healthz" >/dev/null 2>&1 || \
     curl -sSf "http://127.0.0.1:$PORT/"       >/dev/null 2>&1; then
    echo "‚úî Healthcheck OK (try $i)"
    break
  fi
  sleep 1
  [ "$i" -eq 20 ] && {
    echo "‚úñ Healthcheck KO apr√®s 20s ‚Äî rollback‚Ä¶"
    if [ -n "$OLD_CURRENT" ] && [ -d "$OLD_CURRENT" ]; then
      run "ln -sfn '$OLD_CURRENT' '$APP_DIR/current'"
      run "sudo systemctl restart '$SERVICE'"
      echo "Rollback effectu√© -> $OLD_CURRENT"
    else
      echo "Aucun ancien release s√ªr trouv√© ‚Äî rollback impossible."
    fi
    echo "Derniers logs du service :"
    run "sudo journalctl -u '$SERVICE' -n 80 --no-pager || true"
    exit 1
  }
done

### --- DIAGNOSTIC POST-START ---
step "Diagnostic rapide"
run "sudo ss -lptn 'sport = :$PORT' || true"
run "readlink -f '$APP_DIR/current'"
run "ls -1 '$APP_DIR/releases' | tail -n 5"

### --- R√âTENTION ---
step "R√©tention: garder $KEEP_RELEASES releases (purge anciens)"
# garde les $KEEP_RELEASES plus r√©cents
TO_DELETE=$(ls -1 "$APP_DIR/releases" | sort | head -n -"$KEEP_RELEASES" 2>/dev/null || true)
if [ -n "$TO_DELETE" ]; then
  echo "$TO_DELETE" | while read -r d; do
    run "rm -rf '$APP_DIR/releases/$d'"
  done
else
  echo "Rien √† purger."
fi

### --- FIN ---
echo
echo "‚úÖ D√©ploiement OK -> $REL_DIR"
echo "üìù Log complet: $LOG_FILE"
echo "‚è±  Dur√©e totale: ${SECONDS}s"
